/*
 * Recebimento.java
 *
 * Created on 14/10/2009, 14:07:27
 */
package visaoFuncionario;

import controlador.Controlador;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.MaskFormatter;
import utilitarios.DataSistema;
import utilitarios.Extenso;
import utilitarios.Impressao;
import utilitarios.Sessao;

/**
 *
 * @author Hemerson e Jefferson
 */
public class RecebimentoFun extends javax.swing.JFrame {

    List parcelas;
    List compras = new ArrayList();
    int compraAtual;
    private UIManager.LookAndFeelInfo[] looks = UIManager.getInstalledLookAndFeels();
    Controlador controlador;
    DefaultTableModel modelo;
    DefaultTableCellRenderer cellRenderer = new DefaultTableCellRenderer();
    Sessao sessao;
    String visao;
    int linha = -1;

    /** Creates new form Recebimento */
    public RecebimentoFun() {
        initComponents();
        sessao = new Sessao();
        visao = "";
        this.construtor(this.sessao);
        timer1.start();
    }

    public RecebimentoFun(String visao, DefaultTableModel model, int linhaSelecionada, Sessao sessao) {
        initComponents();
        this.visao = visao;
        this.construtor(sessao);
        this.pegaVendas(model);
        this.compraAtual = linhaSelecionada;
        this.mostracaixa();
        timer1.start();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        timer1 = new org.netbeans.examples.lib.timerbean.Timer();
        jDialogRecebimento = new javax.swing.JDialog();
        jPanel9 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jTextFieldValorCaixa = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jTextFieldDinheiroCaixa = new javax.swing.JTextField();
        jTextFieldTrocoCaixa = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jButtonReceberCaixa = new javax.swing.JButton();
        jTextFieldJurosCaixa = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jTextFieldNumParcelaCaixa = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldNumCupom = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldCodigoCliente = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldNomeCliente = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldCodigoFuncionario = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextFieldNomeFuncionario = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jButtonPrimeiraVenda = new javax.swing.JButton();
        jButtonVendaAnterior = new javax.swing.JButton();
        jButtonUltimaVenda = new javax.swing.JButton();
        jButtonProximaVenda = new javax.swing.JButton();
        jButtonVoltar = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jFormattedTextFieldDataVenda = new javax.swing.JFormattedTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableItensVenda = new javax.swing.JTable();
        jLabelTotal = new javax.swing.JLabel();
        jLabelRestante = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableParcelas = new javax.swing.JTable();
        jLabelEntrada = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jLabelData = new javax.swing.JLabel();
        jLabelHora = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabelLogin = new javax.swing.JLabel();

        timer1.addTimerListener(new org.netbeans.examples.lib.timerbean.TimerListener() {
            public void onTime(java.awt.event.ActionEvent evt) {
                timer1OnTime(evt);
            }
        });

        jDialogRecebimento.setModal(true);
        jDialogRecebimento.setResizable(false);

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Caixa"));

        jLabel17.setFont(new java.awt.Font("Verdana", 1, 18));
        jLabel17.setText("Valor: ");

        jTextFieldValorCaixa.setEditable(false);
        jTextFieldValorCaixa.setFont(new java.awt.Font("Arial", 1, 18));
        jTextFieldValorCaixa.setForeground(new java.awt.Color(0, 0, 204));
        jTextFieldValorCaixa.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldValorCaixa.setFocusable(false);

        jLabel18.setFont(new java.awt.Font("Verdana", 1, 18));
        jLabel18.setText("V. Recebido:");

        jTextFieldDinheiroCaixa.setFont(new java.awt.Font("Arial", 1, 18));
        jTextFieldDinheiroCaixa.setForeground(new java.awt.Color(0, 0, 204));
        jTextFieldDinheiroCaixa.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldDinheiroCaixa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldDinheiroCaixaActionPerformed(evt);
            }
        });
        jTextFieldDinheiroCaixa.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldDinheiroCaixaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldDinheiroCaixaFocusLost(evt);
            }
        });

        jTextFieldTrocoCaixa.setEditable(false);
        jTextFieldTrocoCaixa.setFont(new java.awt.Font("Arial", 1, 18));
        jTextFieldTrocoCaixa.setForeground(new java.awt.Color(0, 0, 204));
        jTextFieldTrocoCaixa.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldTrocoCaixa.setFocusable(false);

        jLabel19.setFont(new java.awt.Font("Verdana", 1, 18));
        jLabel19.setText("Troco:");

        jButtonReceberCaixa.setText("Receber");
        jButtonReceberCaixa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReceberCaixaActionPerformed(evt);
            }
        });

        jTextFieldJurosCaixa.setFont(new java.awt.Font("Arial", 1, 18));
        jTextFieldJurosCaixa.setForeground(new java.awt.Color(0, 0, 204));
        jTextFieldJurosCaixa.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldJurosCaixa.setFocusable(false);
        jTextFieldJurosCaixa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldJurosCaixaActionPerformed(evt);
            }
        });
        jTextFieldJurosCaixa.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldJurosCaixaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldJurosCaixaFocusLost(evt);
            }
        });

        jLabel20.setFont(new java.awt.Font("Verdana", 1, 18));
        jLabel20.setText("Juros %: ");

        jTextFieldNumParcelaCaixa.setEditable(false);
        jTextFieldNumParcelaCaixa.setFont(new java.awt.Font("Arial", 1, 18));
        jTextFieldNumParcelaCaixa.setForeground(new java.awt.Color(0, 0, 204));
        jTextFieldNumParcelaCaixa.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldNumParcelaCaixa.setFocusable(false);

        jLabel21.setFont(new java.awt.Font("Verdana", 1, 18));
        jLabel21.setText("Parcela: ");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonReceberCaixa, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                                    .addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                                    .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                                .addGap(17, 17, 17)))
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldTrocoCaixa, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                            .addComponent(jTextFieldJurosCaixa, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldNumParcelaCaixa, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                            .addComponent(jTextFieldValorCaixa, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                            .addComponent(jTextFieldDinheiroCaixa, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(jTextFieldNumParcelaCaixa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(jTextFieldJurosCaixa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(jTextFieldValorCaixa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldDinheiroCaixa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(jTextFieldTrocoCaixa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addComponent(jButtonReceberCaixa)
                .addContainerGap())
        );

        javax.swing.GroupLayout jDialogRecebimentoLayout = new javax.swing.GroupLayout(jDialogRecebimento.getContentPane());
        jDialogRecebimento.getContentPane().setLayout(jDialogRecebimentoLayout);
        jDialogRecebimentoLayout.setHorizontalGroup(
            jDialogRecebimentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogRecebimentoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jDialogRecebimentoLayout.setVerticalGroup(
            jDialogRecebimentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogRecebimentoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Recebimento");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText("N. Cupom:");

        jTextFieldNumCupom.setEditable(false);
        jTextFieldNumCupom.setFocusable(false);

        jLabel2.setText("Data Venda:");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Vendido para:", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        jLabel3.setText("Codigo:");

        jTextFieldCodigoCliente.setEditable(false);
        jTextFieldCodigoCliente.setFocusable(false);

        jLabel4.setText("Nome:");

        jTextFieldNomeCliente.setEditable(false);
        jTextFieldNomeCliente.setFocusable(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldCodigoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(jTextFieldNomeCliente, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextFieldCodigoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextFieldNomeCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Vendido por:", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        jLabel5.setText("Codigo:");

        jTextFieldCodigoFuncionario.setEditable(false);
        jTextFieldCodigoFuncionario.setFocusable(false);

        jLabel6.setText("Nome:");

        jTextFieldNomeFuncionario.setEditable(false);
        jTextFieldNomeFuncionario.setFocusable(false);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldCodigoFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(jTextFieldNomeFuncionario, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextFieldCodigoFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTextFieldNomeFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Navegacao", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        jButtonPrimeiraVenda.setText("<");
        jButtonPrimeiraVenda.setToolTipText("Primeira compra do cliente");
        jButtonPrimeiraVenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPrimeiraVendaActionPerformed(evt);
            }
        });

        jButtonVendaAnterior.setText("<<");
        jButtonVendaAnterior.setToolTipText("Compra anterior do cliente");
        jButtonVendaAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVendaAnteriorActionPerformed(evt);
            }
        });

        jButtonUltimaVenda.setText(">");
        jButtonUltimaVenda.setToolTipText("Ultima compra do cliente");
        jButtonUltimaVenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUltimaVendaActionPerformed(evt);
            }
        });

        jButtonProximaVenda.setText(">>");
        jButtonProximaVenda.setToolTipText("Proxima compra do cliente");
        jButtonProximaVenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonProximaVendaActionPerformed(evt);
            }
        });

        jButtonVoltar.setText("Voltar");
        jButtonVoltar.setToolTipText("Volta ao cadastro do cliente");
        jButtonVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVoltarActionPerformed(evt);
            }
        });

        jButton1.setText("Sair");
        jButton1.setToolTipText("Volta para a tela principal");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonPrimeiraVenda)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonVendaAnterior)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonProximaVenda)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonUltimaVenda)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(jButtonVoltar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonPrimeiraVenda)
                    .addComponent(jButtonVendaAnterior)
                    .addComponent(jButtonProximaVenda)
                    .addComponent(jButtonUltimaVenda)
                    .addComponent(jButton1)
                    .addComponent(jButtonVoltar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jFormattedTextFieldDataVenda.setEditable(false);
        jFormattedTextFieldDataVenda.setFocusable(false);

        jTableItensVenda.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Descricao", "Qtde", "V. Unitario"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableItensVenda.setToolTipText("Produtos adquiridos pelo cliente");
        jScrollPane2.setViewportView(jTableItensVenda);

        jLabelTotal.setText("Total: R$ 0000.00");

        jLabelRestante.setText("Restante: R$ 0000.00");

        jTableParcelas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Parcela", "Vencimento", "Valor", "Funcionario"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableParcelas.setToolTipText("Clique duplo para receber a parcela");
        jTableParcelas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableParcelasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableParcelas);

        jLabelEntrada.setText("Entrada: R$ 0000.00");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabelTotal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelEntrada, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelRestante, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldNumCupom, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 106, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jFormattedTextFieldDataVenda, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jTextFieldNumCupom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jFormattedTextFieldDataVenda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabelTotal)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelEntrada)
                                .addGap(7, 7, 7)
                                .addComponent(jLabelRestante))
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addComponent(jScrollPane2, 0, 0, Short.MAX_VALUE)))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabelHora.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        jLabel13.setText("Usuario:");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelLogin, javax.swing.GroupLayout.DEFAULT_SIZE, 846, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabelData, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelHora, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jLabelLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabelData, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelHora, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(13, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        new TelaPrincipalFun(sessao).show();
        this.dispose();
    }//GEN-LAST:event_formWindowClosing

    private void jButtonVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVoltarActionPerformed
        HashMap<String, Object> caixa = new HashMap<String, Object>();
        caixa.put("operacao", "busca");
        caixa.put("posicao", "cod");
        caixa.put("modelo", this.visao.split("#")[0]);
        if (this.visao.equals("cliente")) {
            caixa.put("cod", jTextFieldCodigoCliente.getText());
            caixa = controlador.recebeOperacao(caixa);
            new CadastroClienteFun(caixa, sessao).show();
            this.dispose();
        } else {
            if (this.visao.split("#")[0].equals("produto")) {
                caixa.put("cod", this.visao.split("#")[1]);
                caixa = controlador.recebeOperacao(caixa);
                new CadastroProdutoFun(caixa, sessao).show();
                this.dispose();
            }
        }

    }//GEN-LAST:event_jButtonVoltarActionPerformed

    private void jButtonPrimeiraVendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPrimeiraVendaActionPerformed
        this.compraAtual = 0;
        this.mostracaixa();
    }//GEN-LAST:event_jButtonPrimeiraVendaActionPerformed

    private void jButtonVendaAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVendaAnteriorActionPerformed
        this.compraAtual--;
        if (this.compraAtual < 0) {
            this.compraAtual = this.compras.size() - 1;
        }
        this.mostracaixa();
    }//GEN-LAST:event_jButtonVendaAnteriorActionPerformed

    private void jButtonProximaVendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonProximaVendaActionPerformed
        this.compraAtual++;
        if (this.compraAtual >= this.compras.size()) {
            this.compraAtual = 0;
        }
        this.mostracaixa();
    }//GEN-LAST:event_jButtonProximaVendaActionPerformed

    private void jButtonUltimaVendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUltimaVendaActionPerformed
        this.compraAtual = this.compras.size() - 1;
        this.mostracaixa();
    }//GEN-LAST:event_jButtonUltimaVendaActionPerformed

    private void timer1OnTime(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timer1OnTime
        DataSistema d = DataSistema.getInstance();
        String g = d.diaMesAno();
        jLabelData.setText(g);
        String h = d.horaMinSeg();
        jLabelHora.setText(h);
    }//GEN-LAST:event_timer1OnTime

    private void jTableParcelasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableParcelasMouseClicked
        linha = -1;
        if (evt.getClickCount() == 2) {
            if (jTableParcelas.getSelectedRow() >= 0) {
                linha = jTableParcelas.getSelectedRow();
                modelo = (DefaultTableModel) jTableParcelas.getModel();
                String a = modelo.getValueAt(linha, 0) + "";
                if (!a.equals("0")) {
                    if (((String) modelo.getValueAt(linha, 3)).equals(" ")) {
                        jTextFieldNumParcelaCaixa.setText("" + modelo.getValueAt(linha, 0));
                        jTextFieldValorCaixa.setText("" + modelo.getValueAt(linha, 2));
                        //verifica se parcela esta vencida
                        //DataSistema dataAtual = new DataSistema();

                        if (DataSistema.getInstance().antes((String) modelo.getValueAt(linha, 1))) {
                            jTextFieldJurosCaixa.setText("0");
                        } else {
                            jTextFieldJurosCaixa.setFocusable(true);
                        }
                        this.jDialogRecebimento.setSize(355, 355);
                        this.jDialogRecebimento.setLocationRelativeTo(this);
                        this.jDialogRecebimento.setTitle("RECEBIMENTO");
                        this.jDialogRecebimento.setVisible(true);
                    } else {
                        //parcela ja foi paga
                        //exemplo: dataVencimento#valor#datapagamento#situacao#funcionarioRecebeu
                        String aux = (String) parcelas.get(linha--);
                        JOptionPane.showMessageDialog(null, "Esta parcela ja foi recebida \nPor: " + aux.split("#")[4] + "\nEm: " + aux.split("#")[2]);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Esta parcela ja foi recebida \nPor: " + modelo.getValueAt(linha, 3) + "\nEm: " + modelo.getValueAt(linha, 1));
                }
            }
        }
    }//GEN-LAST:event_jTableParcelasMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        new TelaPrincipalFun(sessao).show();
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextFieldDinheiroCaixaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldDinheiroCaixaActionPerformed
        try {
            double dinheiro = Double.parseDouble(this.trataPreco(jTextFieldDinheiroCaixa.getText()));
            double valorParcela = Double.parseDouble(this.trataPreco(jTextFieldValorCaixa.getText()));
            if (dinheiro < valorParcela) {
                JOptionPane.showMessageDialog(null, "Valor insuficiente!", "Erro", JOptionPane.INFORMATION_MESSAGE);
                jTextFieldDinheiroCaixa.setSelectionStart(0);
                jTextFieldDinheiroCaixa.setSelectionEnd(jTextFieldDinheiroCaixa.getText().length());
            } else {
                jTextFieldTrocoCaixa.setText(this.trataPreco("" + (dinheiro - valorParcela)));
                jButtonReceberCaixa.requestFocus();
            }
        } catch (Exception e) {
            jTextFieldTrocoCaixa.setText("0.00");
            jTextFieldDinheiroCaixa.setText(this.trataPreco(jTextFieldDinheiroCaixa.getText()));
            jTextFieldJurosCaixa.setText(this.trataPreco(jTextFieldJurosCaixa.getText()).split(".")[0]);
            jTextFieldDinheiroCaixa.setSelectionStart(0);
            jTextFieldDinheiroCaixa.setSelectionEnd(jTextFieldDinheiroCaixa.getText().length());
        }
}//GEN-LAST:event_jTextFieldDinheiroCaixaActionPerformed

    private void jTextFieldDinheiroCaixaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldDinheiroCaixaFocusGained
        jTextFieldDinheiroCaixa.setSelectionStart(0);
        jTextFieldDinheiroCaixa.setSelectionEnd(jTextFieldDinheiroCaixa.getText().length());
}//GEN-LAST:event_jTextFieldDinheiroCaixaFocusGained

    private void jTextFieldDinheiroCaixaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldDinheiroCaixaFocusLost
        jTextFieldDinheiroCaixa.setText(this.trataPreco(jTextFieldDinheiroCaixa.getText()));
}//GEN-LAST:event_jTextFieldDinheiroCaixaFocusLost

    private void jButtonReceberCaixaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReceberCaixaActionPerformed
        try {
            double dinheiro = Double.parseDouble(this.trataPreco(jTextFieldDinheiroCaixa.getText()));
            double valorParcela = Double.parseDouble(this.trataPreco(jTextFieldValorCaixa.getText()));
            if (dinheiro < valorParcela) {
                JOptionPane.showMessageDialog(null, "Valor insuficiente!", "Erro", JOptionPane.INFORMATION_MESSAGE);
                jTextFieldDinheiroCaixa.setSelectionStart(0);
                jTextFieldDinheiroCaixa.setSelectionEnd(jTextFieldDinheiroCaixa.getText().length());
                jTextFieldDinheiroCaixa.requestFocus();
            } else {
                this.atualizaVenda();
            }
        } catch (Exception e) {
            this.limpaTudo();
            JOptionPane.showMessageDialog(null, "Por Favor - Corrija os valores.", "", JOptionPane.INFORMATION_MESSAGE);
            jDialogRecebimento.setVisible(false);
        }

    }//GEN-LAST:event_jButtonReceberCaixaActionPerformed

    private void calculaValorFinal() {
        double valorTotal = 0.0;
        try {
            double desc = Double.parseDouble(jTextFieldJurosCaixa.getText());
            desc = (desc / 100) * Double.parseDouble(jTextFieldValorCaixa.getText());
            valorTotal = Double.parseDouble(jTextFieldValorCaixa.getText()) + desc;

        } catch (Exception e) {
            valorTotal = Double.parseDouble(jTextFieldValorCaixa.getText());
            jTextFieldJurosCaixa.setText("0");
        }
        valorTotal += 0.5;
        int vt = (int) valorTotal;
        valorTotal = vt;
        String total = "" + valorTotal;
        jTextFieldValorCaixa.setText(this.trataPreco(total));
    }
    private void jTextFieldJurosCaixaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldJurosCaixaActionPerformed
        this.calculaValorFinal();
        /*
        try {
        double valor = Double.parseDouble(jTextFieldValorCaixa.getText());
        double juros = Double.parseDouble(this.trataPreco(jTextFieldJurosCaixa.getText()));
        valor = valor + (valor * (juros / 100));
        jTextFieldValorCaixa.setText(this.trataPreco("" + valor));
        jTextFieldDinheiroCaixa.requestFocus();
        } catch (Exception e) {
        jTextFieldJurosCaixa.setText("");
        jTextFieldJurosCaixa.requestFocus();
        }*/
    }//GEN-LAST:event_jTextFieldJurosCaixaActionPerformed

    private void jTextFieldJurosCaixaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldJurosCaixaFocusLost
        this.calculaValorFinal();
    }//GEN-LAST:event_jTextFieldJurosCaixaFocusLost

    private void jTextFieldJurosCaixaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldJurosCaixaFocusGained
        jTextFieldJurosCaixa.setSelectionStart(0);
        jTextFieldJurosCaixa.setSelectionEnd(jTextFieldJurosCaixa.getText().length());
    }//GEN-LAST:event_jTextFieldJurosCaixaFocusGained

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new RecebimentoFun().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonPrimeiraVenda;
    private javax.swing.JButton jButtonProximaVenda;
    private javax.swing.JButton jButtonReceberCaixa;
    private javax.swing.JButton jButtonUltimaVenda;
    private javax.swing.JButton jButtonVendaAnterior;
    private javax.swing.JButton jButtonVoltar;
    private javax.swing.JDialog jDialogRecebimento;
    private javax.swing.JFormattedTextField jFormattedTextFieldDataVenda;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabelData;
    private javax.swing.JLabel jLabelEntrada;
    private javax.swing.JLabel jLabelHora;
    private javax.swing.JLabel jLabelLogin;
    private javax.swing.JLabel jLabelRestante;
    private javax.swing.JLabel jLabelTotal;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableItensVenda;
    private javax.swing.JTable jTableParcelas;
    private javax.swing.JTextField jTextFieldCodigoCliente;
    private javax.swing.JTextField jTextFieldCodigoFuncionario;
    private javax.swing.JTextField jTextFieldDinheiroCaixa;
    private javax.swing.JTextField jTextFieldJurosCaixa;
    private javax.swing.JTextField jTextFieldNomeCliente;
    private javax.swing.JTextField jTextFieldNomeFuncionario;
    private javax.swing.JTextField jTextFieldNumCupom;
    private javax.swing.JTextField jTextFieldNumParcelaCaixa;
    private javax.swing.JTextField jTextFieldTrocoCaixa;
    private javax.swing.JTextField jTextFieldValorCaixa;
    private org.netbeans.examples.lib.timerbean.Timer timer1;
    // End of variables declaration//GEN-END:variables

    private void construtor(Sessao sessao) {
        this.setLocationRelativeTo(null);
        controlador = new Controlador();
        this.mascaraData();
        jTableItensVenda.getTableHeader().setReorderingAllowed(false);
        jTableParcelas.getTableHeader().setReorderingAllowed(false);
        jLabelLogin.setText(sessao.getLogin());
        this.sessao = new Sessao();
        this.sessao.setLogin(sessao.getLogin());
        this.sessao.setSenha(sessao.getSenha());
        this.alinhaColunas();
        if (!visao.equals("cliente")) {
            jTableParcelas.setEnabled(false);
            if (visao.equals("funcionario")) {
                this.setTitle("Historico de vendas do funcionario");
            } else {
                if (visao.split("#")[0].equals("produto")) {
                    this.setTitle("Historico de saida de produto");
                }
            }
        }
    }

    private void mostracaixa() {
        HashMap<String, Object> caixa = new HashMap<String, Object>();
        caixa.put("modelo", "venda");
        caixa.put("operacao", "busca");
        caixa.put("posicao", "cod");
        caixa.put("cod", this.compras.get(this.compraAtual) + "");
        caixa = controlador.recebeOperacao(caixa);
        List listaVendas = (List) caixa.get("lista");
        caixa = (HashMap<String, Object>) listaVendas.get(0);
        //int codVenda = (Integer) model.getValueAt(linhaSelecionada, 0);
        if (caixa != null) {
            jLabelTotal.setText("Total: R$ " + this.trataPreco(caixa.get("valorTotal") + ""));
            jLabelEntrada.setText("Entrada: R$ " + this.trataPreco(caixa.get("valorEntrada") + ""));
            jLabelRestante.setText("Restante: R$ " + this.trataPreco(caixa.get("valorRestante") + ""));
            jTextFieldNumCupom.setText((String) caixa.get("cod"));
            jFormattedTextFieldDataVenda.setValue(caixa.get("dataVenda"));
            jTextFieldCodigoCliente.setText((String) caixa.get("codCliente"));
            HashMap<String, Object> dados = new HashMap<String, Object>();
            dados.put("modelo", "cliente");
            dados.put("operacao", "busca");
            dados.put("posicao", "cod");
            dados.put("cod", jTextFieldCodigoCliente.getText());
            dados = controlador.recebeOperacao(dados);
            jTextFieldNomeCliente.setText((String) dados.get("nome"));
            jTextFieldCodigoFuncionario.setText((String) caixa.get("codFuncionario"));
            dados = new HashMap<String, Object>();
            dados.put("modelo", "funcionario");
            dados.put("operacao", "busca");
            dados.put("posicao", "cod");
            dados.put("cod", jTextFieldCodigoFuncionario.getText());
            dados = controlador.recebeOperacao(dados);
            jTextFieldNomeFuncionario.setText((String) dados.get("nome"));
            parcelas = (List) caixa.get("parcelas");
            this.limpaTabelas("all");
            if (!caixa.get("avista").equals("true")) {
                if (parcelas != null) {
                    modelo = (DefaultTableModel) jTableParcelas.getModel();
                    for (int j = 0; j < parcelas.size(); j++) {
                        //exemplo: dataVencimento#valor#datapagamento#situacao#funcionarioRecebeu
                        String parcela = (String) parcelas.get(j);
                        Object linha[] = new Object[]{j + 1, parcela.split("#")[0], this.trataPreco(parcela.split("#")[1]), parcela.split("#")[4]};
                        modelo.addRow(linha);
                    }
                }
            } else {
                HashMap<String, Object> caixaFuncionario = new HashMap<String, Object>();
                caixaFuncionario.put("modelo", "funcionario");
                caixaFuncionario.put("operacao", "busca");
                caixaFuncionario.put("posicao", "cod");
                caixaFuncionario.put("cod", caixa.get("codFuncionario"));
                caixaFuncionario = controlador.recebeOperacao(caixaFuncionario);
                modelo = (DefaultTableModel) jTableParcelas.getModel();
                Object linha[] = new Object[]{"0", caixa.get("dataVenda"), caixa.get("valorTotal"), caixaFuncionario.get("login")};
                modelo.addRow(linha);
            }
            List itensVenda = (List) caixa.get("itensVenda");
            modelo = (DefaultTableModel) jTableItensVenda.getModel();
            for (int j = 0; j < itensVenda.size(); j++) {
                //exemplo: item#codigo#descricao#qtde#valorUnitario
                String itemVenda = (String) itensVenda.get(j);
                Object linha[] = new Object[]{itemVenda.split("#")[1], itemVenda.split("#")[2], itemVenda.split("#")[3]};
                modelo.addRow(linha);
            }
        }
    }

    private void limpaTabelas(String str) {
        if (str.equals("all")) {
            modelo = (DefaultTableModel) jTableParcelas.getModel();
            while (modelo.getRowCount() > 0) {
                modelo.removeRow(0);
            }
            modelo = (DefaultTableModel) jTableItensVenda.getModel();
            while (modelo.getRowCount() > 0) {
                modelo.removeRow(0);
            }
        } else {
            if (str.equals("parcelas")) {
                modelo = (DefaultTableModel) jTableParcelas.getModel();
                while (modelo.getRowCount() > 0) {
                    modelo.removeRow(0);
                }
            }
        }
    }

    public void mascaraData() {
        MaskFormatter format = null;
        jFormattedTextFieldDataVenda.setFormatterFactory(null);
        try {
            format = new MaskFormatter("##/##/####");
            format.setPlaceholderCharacter('0');
        } catch (Exception ex) {
            System.out.println("Erro ao carregar mascara data");
        }
        jFormattedTextFieldDataVenda.setFormatterFactory(new DefaultFormatterFactory(format));
        jFormattedTextFieldDataVenda.setValue(null);
    }

    private String trataPreco(String valor) {
        try {
            valor = valor.replace(',', '.');
        } catch (Exception e) {
            return "0.00";
        }
        try {
            Double.parseDouble(valor);
            if (valor.equals("")) {
                return "0.00";
            } else {
                String depois = valor.substring(valor.lastIndexOf(".") + 1);
                String antes = valor.substring(0, valor.lastIndexOf(".") + 1);
                if (antes.compareTo("") == 0) {
                    antes = depois + ".";
                    depois = "";
                } else {
                    if (antes.compareTo(".") == 0) {
                        antes = "0" + antes;
                    }
                }
                if (depois.length() < 2) {
                    while (depois.length() < 2) {
                        depois += "0";
                    }
                }
                return antes + depois;
            }
        } catch (NumberFormatException numberFormatException) {
            return "erro";
        }
    }

    private void alinhaColunas() {
        cellRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        jTableParcelas.getColumnModel().getColumn(0).setCellRenderer(cellRenderer);
        jTableParcelas.getColumnModel().getColumn(1).setCellRenderer(cellRenderer);
        jTableParcelas.getColumnModel().getColumn(2).setCellRenderer(cellRenderer);
        jTableParcelas.getColumnModel().getColumn(3).setCellRenderer(cellRenderer);
        jTableItensVenda.getColumnModel().getColumn(1).setCellRenderer(cellRenderer);
        jTableItensVenda.getColumnModel().getColumn(2).setCellRenderer(cellRenderer);

        jTableItensVenda.getColumnModel().getColumn(0).setPreferredWidth(200);
        jTableItensVenda.getColumnModel().getColumn(1).setPreferredWidth(20);
        jTableItensVenda.getColumnModel().getColumn(2).setPreferredWidth(20);

    }

    private void pegaVendas(DefaultTableModel model) {
        this.compras = new ArrayList();
        for (int i = 0; i < model.getRowCount(); i++) {
            compras.add(model.getValueAt(i, 0));
        }
    }

    private String finalizaRecebimento() {
        HashMap<String, Object> caixaVenda = new HashMap(this.pegacaixa());
        HashMap<String, Object> caixa = new HashMap<String, Object>();
        caixaVenda.put("operacao", "alterar");
        caixaVenda.put("modelo", "venda");
        caixa = controlador.recebeOperacao(caixaVenda);
        this.mostracaixa();
        if (caixa.get("retorno").equals("Venda alterado com sucesso")) {
            return "sucesso";
        } else {
            return (String) caixa.get("retorno");
        }

    }

    private void imprimirRecibo() {
        Impressao impressao = new Impressao();
        impressao.imprimir(this.getModeloImprimir());

    }

    private String getModeloImprimir() {
        String impri = "";
        impri += "|============================================================|\n";
        impri += " VANIA MODAS  RECIBO DE PAGAMENTO\n";
        impri += " Horario: " + jLabelHora.getText() + " Data: " + jLabelData.getText() + "\n";
        impri += "|------------------------------------------------------------|\n";
        HashMap<String, Object> caixa = new HashMap<String, Object>();
        caixa.put("modelo", "funcionario");
        caixa.put("operacao", "login");
        caixa.put("login", sessao.getLogin());
        caixa = controlador.recebeOperacao(caixa);
        String nome = "";
        if (caixa != null) {
            impri += " Funcionario: " + caixa.get("cod") + "--";
            nome = caixa.get("nome") + "";
        } else {
            impri += " Funcionario: 0 " + "-- ";
            nome = sessao.getLogin();
        }
        if (nome.length() > 40) {
            for (int i = 0; i < 40; i++) {
                impri += nome.charAt(i);
            }
            impri += "\n";
        } else {
            impri += nome + "\n";
        }
        nome = jTextFieldNomeCliente.getText();
        if (nome != null) {
            impri += " Cliente: "+jTextFieldCodigoCliente.getText()+ "--";
        } else {
            impri += " Cliente: 0-- ";
            nome = sessao.getLogin();
        }

        if (nome.length() > 45) {
            impri += " ";
            for (int i = 0; i < 45; i++) {
                impri += nome.charAt(i);
            }
            impri += "\n ";
        } else {
            impri += " " + nome+"\n";
        }
        impri += "|------------------------------------------------------------|\n";
        impri += " Cupom No: " + jTextFieldNumCupom.getText() + " Parcela No: ";
        int aux = (linha + 1);
        if(aux < 10)
            impri += "0";
        impri += aux+" de ";
        aux = jTableParcelas.getRowCount();
        if(aux < 10)
            impri += "0";
        impri += jTableParcelas.getRowCount() + "\n";
        impri += " Valor: " + jTextFieldValorCaixa.getText() + " ";
        if (linha != -1) {
            modelo = (DefaultTableModel) jTableParcelas.getModel();
            nome = modelo.getValueAt(linha, 1) + "";
            impri += " Vencimento: " + nome;
        }
        if(!jTextFieldJurosCaixa.getText().equals("0")){
            impri += " Acrescimo: " + jTextFieldJurosCaixa.getText() + " %  ";
            impri += " Valor Final: R$" + jTextFieldValorCaixa.getText() + "\n";
        }else{
            impri += "\n";
        }
        Extenso number = new Extenso(Double.parseDouble(jTextFieldValorCaixa.getText()));
        nome = "("+number.toString()+")";

        if (nome.length() > 60) {
            int i = 0;
            while (i < nome.length()) {
                impri += " ";
                for (; (i <(i + 60) && (nome.length() < 60)); i++) {
                    impri += nome.charAt(i);
                }
                impri += "\n";
            }
        } else {
            impri += " " + nome + "\n";
        }
        impri += " Troco: R$" + jTextFieldTrocoCaixa.getText() + "\n";
        impri += "|------------------------------------------------------------|\n";
        impri += " Este recibo deve ser guardado p/ futuras duvidas/reclamacoes\n" ;
        impri += "|------------------------------------------------------------|\n";
        impri += " "+ new Random().nextInt(65000) +" VANIA MODAS ONDE VOCE ENCONTRA O SEU ESTILO\n";
        return impri + "|=====================================================1a VIA=|\n" +
                       "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n" +
               impri + "|=====================================================2a VIA=|\n" +
                       "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n";
    }

    private HashMap<String, Object> pegacaixa() {
        HashMap<String, Object> caixa = new HashMap<String, Object>();
        caixa.put("modelo", "venda");
        caixa.put("operacao", "busca");
        caixa.put("posicao", "cod");
        caixa.put("cod", this.compras.get(this.compraAtual) + "");
        caixa = controlador.recebeOperacao(caixa);
        List parc = (List) caixa.get("parcelas");
        if (parc != null) {
            //exemplo: dataVencimento#valor#datapagamento#situacao#funcionarioRecebeu
            int parcelaPaga = Integer.parseInt(jTextFieldNumParcelaCaixa.getText());
            parcelaPaga--;
            String[] parcela = ((String) parc.get(parcelaPaga)).split("#");
            parcela[2] = jLabelData.getText();
            parcela[3] = "true";
            parcela[4] = sessao.getLogin();
            String concat = parcela[0] + "#" + parcela[1] + "#" + parcela[2] + "#" + parcela[3] + "#" + parcela[4];
            parc.set(parcelaPaga, concat);
            caixa.remove("parcelas");
            caixa.put("parcelas", parc);
            // double valorTotal = Double.parseDouble(((String)caixa.get("valorTotal")));
            double valorRestante = Double.parseDouble(((String) caixa.get("valorRestante")));
            double conta = Double.parseDouble(this.jTextFieldValorCaixa.getText());
            conta = valorRestante - conta;
            if (conta <= 0.0) {
                conta = 0.0;
            }
            caixa.remove("valorRestante");
            caixa.put("valorRestante", conta + "");
        }
        return caixa;
    }

    private void atualizaCaixa() {
        //incluir um caixa do dia se este ja' nao estiver...
        //considerando que um caixa comeca com 150,00 reais
        //Exemplo entrada: valor#natureza#funcionario#horario
        //Exemplo saida: valor#natureza#funcionario#horario
        //Exemplo natureza: parcela/numeroParcela/codVenda/codcliente
        //Exemplo natureza: avista/cliente (cliente ou nao)
        //Exemplo natureza: entrada/codVenda/cliente
        HashMap<String, Object> caixa = new HashMap<String, Object>();
        String date = DataSistema.getInstance().diaMesAno().split(" ")[1];
        caixa.put("data", date);
        caixa.put("modelo", "caixa");
        caixa.put("operacao", "busca");
        caixa.put("posicao", "data");
        caixa = controlador.recebeOperacao(caixa);
        if (caixa == null) {
            //nao existe caixa cadastrado (1a vez)
            caixa = new HashMap<String, Object>();
            caixa.put("modelo", "caixa");
            caixa.put("operacao", "maiorId");
            caixa = controlador.recebeOperacao(caixa);
            if (caixa != null) {
                String cod = caixa.get("retorno") + "";
                caixa = new HashMap<String, Object>();
                caixa.put("data", DataSistema.getInstance().diaMesAno().split(" ")[1]);
                caixa.put("modelo", "caixa");
                caixa.put("operacao", "inserir");
                caixa.put("saidas", "");
                caixa.put("entradas", "");
                caixa.put("cod", cod);
                caixa = controlador.recebeOperacao(caixa);
                caixa = new HashMap<String, Object>();
                caixa.put("modelo", "caixa");
                caixa.put("operacao", "busca");
                caixa.put("posicao", "data");
                caixa.put("data", DataSistema.getInstance().diaMesAno().split(" ")[1]);
                caixa = controlador.recebeOperacao(caixa);
            }
        }
        List entra;
        if (!caixa.get("entradas").equals("")) {
            entra = (List) caixa.get("entradas");
        } else {
            entra = new ArrayList();
        }
        caixa.remove("entradas");
        String add = jTextFieldValorCaixa.getText() + "#";
        add += "parcela/" + jTextFieldNumParcelaCaixa.getText() + "/";
        add += jTextFieldNumCupom.getText() + "/" + jTextFieldCodigoCliente.getText() + "#";
        add += sessao.getLogin() + "#" + jLabelHora.getText();
        entra.add(add);//adiciona o recebimento
        caixa.put("entradas", entra);
        caixa.put("modelo", "caixa");
        caixa.put("operacao", "alterar");
        caixa = controlador.recebeOperacao(caixa);
    }

    private void atualizaVenda() {
        //atualizar parcela
        if (!(jTextFieldDinheiroCaixa.getText().equals("")) && !(jTextFieldValorCaixa.getText() == null) && !(jTextFieldNumParcelaCaixa.getText().equals("0")) &&
                !(jTextFieldDinheiroCaixa.getText().equals("erro"))) {
            int finalizar = JOptionPane.showConfirmDialog(null, "Receber parcela?\n Troco: " + jTextFieldTrocoCaixa.getText(), "", JOptionPane.YES_NO_OPTION);
            if (finalizar == 0) { //sim
                if (this.finalizaRecebimento().equals("sucesso")) {
                    JOptionPane.showMessageDialog(null, "Parcela recebida com sucesso!", "", JOptionPane.INFORMATION_MESSAGE);
                    this.atualizaCaixa();
                    this.imprimirRecibo();
                    finalizar = JOptionPane.showConfirmDialog(null, "Realizar outro recebimento?", "", JOptionPane.YES_NO_OPTION);
                    if (finalizar == 0) {
                        this.limpaTudo();
                        jDialogRecebimento.setVisible(false);
                    } else {
                        this.limpaTudo();
                        jDialogRecebimento.setVisible(false);
                        new TelaPrincipalFun(sessao).show();
                        this.dispose();
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Houve um erro ao receber parcela. Contacte o administrador.!");
                    this.limpaTudo();
                    jDialogRecebimento.setVisible(false);
                }
            }
        } else {
            if (!(jTextFieldDinheiroCaixa.getText().equals("")) && (!jTextFieldValorCaixa.getText().equals(" "))) {
                JOptionPane.showMessageDialog(null, "Valor recebido nao declarado!");
            } else {
                JOptionPane.showMessageDialog(null, "Nao ha parcelas a serem cobradas!");
            }
        }
    }

    private void limpaTudo() {
        jTextFieldNumParcelaCaixa.setText("");
        jTextFieldTrocoCaixa.setText("");
        jTextFieldValorCaixa.setText("");
        jTextFieldJurosCaixa.setText("");
        jTextFieldDinheiroCaixa.setText("");
    }
}
