/*
 * Relatorio.java
 *
 * Created on 22/09/2009, 13:35:12
 */
package visaoGerente;

import controlador.Controlador;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import utilitarios.DataSistema;
import utilitarios.Impressao;
import utilitarios.Sessao;

/**
 *
 * @author Hemerson e Jefferson
 */
public class RelatorioGer extends javax.swing.JFrame {

    DefaultTableModel modelo;
    Controlador controlador = new Controlador();
    DefaultTableCellRenderer cellRenderer = new DefaultTableCellRenderer();
    List l;
    private final Sessao sessao;

    /** Creates new form Relatorio */
    public RelatorioGer() {
        initComponents();
        sessao = null;
        timer1.start();
        modelo = (DefaultTableModel) jTableRelatorio.getModel();
    }

    public RelatorioGer(Sessao sessao) {
        initComponents();
        this.setLocationRelativeTo(null);
        jTableRelatorio.getColumnModel().getColumn(0).setPreferredWidth(3);
        jTableRelatorio.getColumnModel().getColumn(1).setPreferredWidth(350);
        jTableRelatorio.getColumnModel().getColumn(2).setPreferredWidth(70);
        jTableRelatorio.getTableHeader().setReorderingAllowed(false);
        modelo = (DefaultTableModel) jTableRelatorio.getModel();
        jLabelLogin.setText(sessao.getLogin());
        this.sessao = new Sessao();
        this.sessao.setLogin(sessao.getLogin());
        this.sessao.setSenha(sessao.getSenha());
        timer1.start();
        l = new ArrayList();
        this.mostraRelatorio("ESTOQUE", "NOME");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        timer1 = new org.netbeans.examples.lib.timerbean.Timer();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableRelatorio = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jCheckBoxEstoque = new javax.swing.JCheckBox();
        jCheckBoxCliente = new javax.swing.JCheckBox();
        jCheckBoxVenda = new javax.swing.JCheckBox();
        jCheckBoxCaixa = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jCheckBoxOrdenaID = new javax.swing.JCheckBox();
        jCheckBoxOrdenaNomeDesc = new javax.swing.JCheckBox();
        jPanel6 = new javax.swing.JPanel();
        jLabelData = new javax.swing.JLabel();
        jLabelHora = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabelLogin = new javax.swing.JLabel();
        jButtonImprimir = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        timer1.addTimerListener(new org.netbeans.examples.lib.timerbean.TimerListener() {
            public void onTime(java.awt.event.ActionEvent evt) {
                timer1OnTime(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Relatorio");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jTableRelatorio.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Descricao", "Valor"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableRelatorio.setToolTipText("Relatorio");
        jTableRelatorio.setEnabled(false);
        jTableRelatorio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableRelatorioMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableRelatorio);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Relatorios"));

        buttonGroup1.add(jCheckBoxEstoque);
        jCheckBoxEstoque.setSelected(true);
        jCheckBoxEstoque.setText("Estoque");
        jCheckBoxEstoque.setToolTipText("Tipo de relatorio");
        jCheckBoxEstoque.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxEstoqueItemStateChanged(evt);
            }
        });

        buttonGroup1.add(jCheckBoxCliente);
        jCheckBoxCliente.setText("Cliente");
        jCheckBoxCliente.setToolTipText("Tipo de relatorio");
        jCheckBoxCliente.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxClienteItemStateChanged(evt);
            }
        });

        buttonGroup1.add(jCheckBoxVenda);
        jCheckBoxVenda.setText("Venda");
        jCheckBoxVenda.setToolTipText("Tipo de relatorio");
        jCheckBoxVenda.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVendaItemStateChanged(evt);
            }
        });

        buttonGroup1.add(jCheckBoxCaixa);
        jCheckBoxCaixa.setText("Caixa");
        jCheckBoxCaixa.setToolTipText("Tipo de relatorio");
        jCheckBoxCaixa.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxCaixaItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBoxEstoque)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxCliente)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxVenda)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxCaixa)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jCheckBoxEstoque)
                .addComponent(jCheckBoxCliente)
                .addComponent(jCheckBoxVenda)
                .addComponent(jCheckBoxCaixa))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Classificacao"));

        buttonGroup2.add(jCheckBoxOrdenaID);
        jCheckBoxOrdenaID.setText("ID");
        jCheckBoxOrdenaID.setToolTipText("Altera a classificacao do relatorio");
        jCheckBoxOrdenaID.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxOrdenaIDItemStateChanged(evt);
            }
        });

        buttonGroup2.add(jCheckBoxOrdenaNomeDesc);
        jCheckBoxOrdenaNomeDesc.setSelected(true);
        jCheckBoxOrdenaNomeDesc.setText("Desc/Nome");
        jCheckBoxOrdenaNomeDesc.setToolTipText("Altera a classificacao do relatorio");
        jCheckBoxOrdenaNomeDesc.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxOrdenaNomeDescItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBoxOrdenaNomeDesc)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxOrdenaID)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jCheckBoxOrdenaNomeDesc)
                .addComponent(jCheckBoxOrdenaID))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabelHora.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        jLabel12.setText("Usuario:");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelLogin, javax.swing.GroupLayout.DEFAULT_SIZE, 518, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabelData, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelHora, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel12)
                    .addComponent(jLabelLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabelData, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelHora, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButtonImprimir.setText("Imprimir");
        jButtonImprimir.setToolTipText("Imprime o relatorio");
        jButtonImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImprimirActionPerformed(evt);
            }
        });

        jButton2.setText("Cancelar");
        jButton2.setToolTipText("Fecha a janela e mostra a tela principal");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 108, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 614, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButtonImprimir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2))
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButtonImprimir))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBoxEstoqueItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxEstoqueItemStateChanged
        this.mudarClassificacao();
    }//GEN-LAST:event_jCheckBoxEstoqueItemStateChanged

    private void jCheckBoxClienteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxClienteItemStateChanged
        this.mudarClassificacao();
    }//GEN-LAST:event_jCheckBoxClienteItemStateChanged

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        new TelaPrincipalGer(sessao).show();
        this.dispose();
    }//GEN-LAST:event_formWindowClosing

    private void jCheckBoxOrdenaIDItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxOrdenaIDItemStateChanged
        this.mudarClassificacao();
    }//GEN-LAST:event_jCheckBoxOrdenaIDItemStateChanged

    private void jCheckBoxOrdenaNomeDescItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxOrdenaNomeDescItemStateChanged
        this.mudarClassificacao();
    }//GEN-LAST:event_jCheckBoxOrdenaNomeDescItemStateChanged

    private void jCheckBoxVendaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVendaItemStateChanged
        this.mudarClassificacao();
    }//GEN-LAST:event_jCheckBoxVendaItemStateChanged

    private void jCheckBoxCaixaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxCaixaItemStateChanged
        this.mudarClassificacao();
    }//GEN-LAST:event_jCheckBoxCaixaItemStateChanged

    private void timer1OnTime(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timer1OnTime
        DataSistema d = DataSistema.getInstance();
        String g = d.diaMesAno();
        jLabelData.setText(g);
        String h = d.horaMinSeg();
        jLabelHora.setText(h);
    }//GEN-LAST:event_timer1OnTime

    private void jButtonImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImprimirActionPerformed
        this.imprimirRelatorio();

    }//GEN-LAST:event_jButtonImprimirActionPerformed

    private void jTableRelatorioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableRelatorioMouseClicked
        int linha = 0;
        if (evt.getClickCount() == 2) {
            if (jCheckBoxCaixa.isSelected()) {
                if (jTableRelatorio.getSelectedRow() >= 0) {
                    linha = jTableRelatorio.getSelectedRow();
                    modelo = (DefaultTableModel) jTableRelatorio.getModel();
                    String a = modelo.getValueAt(linha, 0) + "";
                    if (!a.equals("0")) {
                        HashMap<String, Object> dados = new HashMap<String, Object>();
                        dados.put("modelo", "caixa");
                        dados.put("operacao", "busca");
                        dados.put("posicao", "cod");
                        dados.put("cod", a);
                        dados = controlador.recebeOperacao(dados);
                        if (dados.get("retorno").equals("sucesso")) {
                            TelaCaixaGer b = new TelaCaixaGer(sessao, dados);
                            b.show();
                            this.dispose();
                        }

                    }
                }
            }
        }
    }//GEN-LAST:event_jTableRelatorioMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        new TelaPrincipalGer(sessao).show();
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new RelatorioGer().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButtonImprimir;
    private javax.swing.JCheckBox jCheckBoxCaixa;
    private javax.swing.JCheckBox jCheckBoxCliente;
    private javax.swing.JCheckBox jCheckBoxEstoque;
    private javax.swing.JCheckBox jCheckBoxOrdenaID;
    private javax.swing.JCheckBox jCheckBoxOrdenaNomeDesc;
    private javax.swing.JCheckBox jCheckBoxVenda;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabelData;
    private javax.swing.JLabel jLabelHora;
    private javax.swing.JLabel jLabelLogin;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableRelatorio;
    private org.netbeans.examples.lib.timerbean.Timer timer1;
    // End of variables declaration//GEN-END:variables

    private void mostraRelatorio(String string, String campo) {
        this.limpaTabela();
        String colunas[];
        if (string.equals("CLIENTE")) { //Relatorio Cliente
            colunas = new String[]{"ID", "Nome", "CPF", "Telefone", "Dividas"};
            this.modelo = new DefaultTableModel(colunas, 0);
            HashMap<String, Object> dados = new HashMap<String, Object>();
            dados.put("modelo", "cliente");
            dados.put("operacao", "ordenaLista");
            if (campo.equals("NOME")) {
                dados.put("classificacao", "ordem");
            } else {
                dados.put("classificacao", "desordem");
            }
            dados = controlador.recebeOperacao(dados);
            l = (List) dados.get("lista");
            try {
                for (int i = 0; i < l.size(); i++) {
                    dados = (HashMap<String, Object>) l.get(i);
                    double dividas;
                    if (dados.get("ativo").equals("true")) {
                        String str = (String) dados.get("compras");
                        dividas = 0.0;
                        try{
                            for (int j = 0; j < str.split("#").length; j++) {
                                int codVenda = Integer.parseInt(str.split("#")[j]);
                                HashMap<String, Object> dadosVenda = new HashMap<String, Object>();
                                dadosVenda.put("modelo", "venda");
                                dadosVenda.put("operacao", "busca");
                                dadosVenda.put("cod", codVenda + "");
                                dadosVenda.put("posicao", "cod");
                                dadosVenda = controlador.recebeOperacao(dadosVenda);
                                List lista = (List) dadosVenda.get("lista");
                                dadosVenda = (HashMap<String, Object>) lista.get(0);
                                Object linha[] = new Object[]{};
                                if (Integer.parseInt((String) dadosVenda.get("cod")) == codVenda) {
                                    if (dadosVenda.get("avista").equals("true")) {
                                        dividas += this.calculaDivida((List) dadosVenda.get("parcelas"));

                                    }
                                }

                            }
                        }catch (NumberFormatException e){
                            dividas = 0.0;
                        }
                        Object linha[] = new Object[]{dados.get("cod"), dados.get("nome"), dados.get("cpf"), dados.get("telefone"), dividas};
                        modelo.addRow(linha);
                    }

                }
            } catch (Exception e) {
            }

            jTableRelatorio.setModel(modelo);
            jTableRelatorio.getColumnModel().getColumn(0).setPreferredWidth(10);
            jTableRelatorio.getColumnModel().getColumn(1).setPreferredWidth(280);
            jTableRelatorio.getColumnModel().getColumn(2).setPreferredWidth(100);
            jTableRelatorio.getColumnModel().getColumn(3).setPreferredWidth(90);
            jTableRelatorio.getColumnModel().getColumn(4).setPreferredWidth(60);
            //Centraliza o conteudo das colunas
            cellRenderer.setHorizontalAlignment(SwingConstants.CENTER);
            jTableRelatorio.getColumnModel().getColumn(0).setCellRenderer(cellRenderer);
            jTableRelatorio.getColumnModel().getColumn(2).setCellRenderer(cellRenderer);
            jTableRelatorio.getColumnModel().getColumn(3).setCellRenderer(cellRenderer);
        } else {
            if (string.equals("ESTOQUE")) { //Relatorio Estoque
                colunas = new String[]{"ID", "Descricao", "Valor", "Quantidade"};
                this.modelo = new DefaultTableModel(colunas, 0);
                HashMap<String, Object> dados = new HashMap<String, Object>();
                dados.put("modelo", "produto");
                dados.put("operacao", "ordenaLista");
                if (campo.equals("NOME")) {
                    dados.put("classificacao", "ordem");
                } else {
                    dados.put("classificacao", "desordem");
                }
                dados = controlador.recebeOperacao(dados);
                l = (List) dados.get("lista");
                for (int i = 0; i < l.size(); i++) {
                    dados = (HashMap<String, Object>) l.get(i);
                    if(dados.get("ativo").equals("true")){
                        int qtde = Integer.parseInt((String) dados.get("qtdeEntrada")) - Integer.parseInt((String) dados.get("qtdeVendida"));
                        Object linha[] = new Object[]{dados.get("cod"), dados.get("desc"), "R$ " + dados.get("valorVenda"), qtde};
                        modelo.addRow(linha);
                    }
                }
                jTableRelatorio.setModel(modelo);
                jTableRelatorio.getColumnModel().getColumn(0).setPreferredWidth(10);
                jTableRelatorio.getColumnModel().getColumn(1).setPreferredWidth(300);
                jTableRelatorio.getColumnModel().getColumn(2).setPreferredWidth(60);
                jTableRelatorio.getColumnModel().getColumn(3).setPreferredWidth(60);

                //Centraliza o conteudo das colunas
                cellRenderer.setHorizontalAlignment(SwingConstants.CENTER);
                jTableRelatorio.getColumnModel().getColumn(0).setCellRenderer(cellRenderer);
                jTableRelatorio.getColumnModel().getColumn(3).setCellRenderer(cellRenderer);

            } else {
                if (string.equals("CAIXA")) { //Relatorio Estoque
                    HashMap<String, Object> dados = new HashMap<String, Object>();
                    dados.put("modelo", "caixa");
                    dados.put("operacao", "ordenaLista");
                    if (campo.equals("NOME")) {
                        dados.put("classificacao", "ordem");
                    } else {
                        dados.put("classificacao", "desordem");
                    }
                    dados = controlador.recebeOperacao(dados);
                    if (dados == null) {//sem movimentacao
                        dados = new HashMap<String, Object>();
                        dados.put("modelo", "caixa");
                        dados.put("operacao", "maiorId");
                        dados = controlador.recebeOperacao(dados);
                        if (dados != null) {
                            String cod = dados.get("retorno") + "";
                            dados = new HashMap<String, Object>();
                            dados.put("data", DataSistema.getInstance().diaMesAno().split(" ")[1]);
                            dados.put("modelo", "caixa");
                            dados.put("operacao", "inserir");
                            dados.put("saidas", "");
                            dados.put("entradas", "");
                            dados.put("cod", cod);
                            dados = controlador.recebeOperacao(dados);
                            dados = new HashMap<String, Object>();
                            dados.put("modelo", "caixa");
                            dados.put("operacao", "ordenaLista");
                            if (campo.equals("NOME")) {
                                dados.put("classificacao", "ordem");
                            } else {
                                dados.put("classificacao", "desordem");
                            }
                            dados = controlador.recebeOperacao(dados);
                        }
                    }
                    if (dados.get("lista") != null) {
                        l = (List) dados.get("lista");
                        colunas = new String[]{"ID", "Data", "Valor"};
                        this.modelo = new DefaultTableModel(colunas, 0);
                        for (int i = 0; i < l.size(); i++) {
                            dados = (HashMap<String, Object>) l.get(i);
                            double s = Double.parseDouble(dados.get("valorTotalSaida") + ""), e = Double.parseDouble(dados.get("valorTotalEntrada") + "");
                            s = e - s;
                            Object linha[] = new Object[]{dados.get("cod"), dados.get("data"), "R$ " + this.trataPreco(s + "")};
                            modelo.addRow(linha);
                        }
                    }
                    jTableRelatorio.setModel(modelo);
                    jTableRelatorio.getColumnModel().getColumn(0).setPreferredWidth(10);
                    jTableRelatorio.getColumnModel().getColumn(1).setPreferredWidth(300);
                    jTableRelatorio.getColumnModel().getColumn(2).setPreferredWidth(60);
                    //Centraliza o conteudo das colunas
                    cellRenderer.setHorizontalAlignment(SwingConstants.CENTER);
                    jTableRelatorio.getColumnModel().getColumn(0).setCellRenderer(cellRenderer);
                    jTableRelatorio.getColumnModel().getColumn(1).setCellRenderer(cellRenderer);
                    jTableRelatorio.getColumnModel().getColumn(2).setCellRenderer(cellRenderer);
                } else {
                    if (string.equals("VENDA")) { //Relatorio Estoque
                        HashMap<String, Object> dados = new HashMap<String, Object>();
                        dados.put("modelo", "venda");
                        dados.put("operacao", "ordenaLista");
                        if (campo.equals("NOME")) {
                            dados.put("classificacao", "ordem");
                        } else {
                            dados.put("classificacao", "desordem");
                        }
                        dados = controlador.recebeOperacao(dados);
                        if (dados.get("lista") != null) {
                            l = (List) dados.get("lista");
                            colunas = new String[]{"ID", "Data", "Total", "Tipo"};
                            this.modelo = new DefaultTableModel(colunas, 0);
                            for (int i = 0; i < l.size(); i++) {
                                dados = (HashMap<String, Object>) l.get(i);
                                Object linha[] = new Object[]{"", "", "", "", "", ""};

                                if (dados.get("avista").equals("true")) {
                                    linha = new Object[]{dados.get("cod"), dados.get("dataVenda"), dados.get("valorTotal")+"0", "A VISTA"};
                                } else {
                                    linha = new Object[]{dados.get("cod"), dados.get("dataVenda"), dados.get("valorTotal")+"0", "A PRAZO"};
                                }
                                modelo.addRow(linha);
                            }
                        }
                        jTableRelatorio.setModel(modelo);
                        jTableRelatorio.getColumnModel().getColumn(0).setPreferredWidth(10);
                        jTableRelatorio.getColumnModel().getColumn(1).setPreferredWidth(60);
                        jTableRelatorio.getColumnModel().getColumn(2).setPreferredWidth(60);
                        jTableRelatorio.getColumnModel().getColumn(3).setPreferredWidth(60);
                        //Centraliza o conteudo das colunas
                        cellRenderer.setHorizontalAlignment(SwingConstants.CENTER);
                        jTableRelatorio.getColumnModel().getColumn(0).setCellRenderer(cellRenderer);
                        jTableRelatorio.getColumnModel().getColumn(1).setCellRenderer(cellRenderer);
                        jTableRelatorio.getColumnModel().getColumn(2).setCellRenderer(cellRenderer);
                        jTableRelatorio.getColumnModel().getColumn(3).setCellRenderer(cellRenderer);
                    }
                }
            }
        }
    }

    private double calculaDivida(List<String> parcelas) {
        double divida = 0.0;
        //exemplo: dataVencimento#valor#datapagamento#situacao#funcionarioRecebeu
        for (int i = 0; i < parcelas.size(); i++) {
            if (parcelas.get(i).split("#")[3].equals("false")) {
                divida += Double.parseDouble(parcelas.get(i).split("#")[1]);
            }
        }
        return divida;
    }

    private void limpaTabela() {
        modelo = (DefaultTableModel) jTableRelatorio.getModel();
        while (modelo.getRowCount() > 0) {
            modelo.removeRow(0);
        }
        jTableRelatorio.setModel(modelo);
    }

    private void mudarClassificacao() {
        String campo = "";
        String banco = "";
        if (jCheckBoxEstoque.isSelected()) {
            banco = "ESTOQUE";
        } else {
            if (jCheckBoxCliente.isSelected()) {
                banco = "CLIENTE";
            } else {
                if (jCheckBoxVenda.isSelected()) {
                    banco = "VENDA";
                } else {
                    if (jCheckBoxCaixa.isSelected()) {
                        banco = "CAIXA";
                    }
                }
            }
        }
        if (jCheckBoxOrdenaID.isSelected()) {
            campo = "ID";
        } else {
            if (jCheckBoxOrdenaNomeDesc.isSelected()) {
                campo = "NOME";
            }
        }
        if ((!campo.equals("")) && (!banco.equals(""))) {
            this.ordenaRelatorio(campo, banco);
        }
    }

    private void ordenaRelatorio(String campo, String banco) {
        this.mostraRelatorio(banco, campo);
    }

    private String trataPreco(String valor) {
        try {
            valor = valor.replace(',', '.');
        } catch (Exception e) {
            return "0.00";
        }
        try {
            Double.parseDouble(valor);
            if (valor.equals("")) {
                return "0.00";
            } else {
                String depois = valor.substring(valor.lastIndexOf(".") + 1);
                String antes = valor.substring(0, valor.lastIndexOf(".") + 1);
                if (antes.compareTo("") == 0) {
                    antes = depois + ".";
                    depois = "";
                } else {
                    if (antes.compareTo(".") == 0) {
                        antes = "0" + antes;
                    }
                }
                if (depois.length() < 2) {
                    while (depois.length() < 2) {
                        depois += "0";
                    }
                }
                return antes + depois;
            }
        } catch (NumberFormatException numberFormatException) {
            return "erro";
        }
    }

    private HashMap<String, Object> pegaDados() {
        HashMap<String, Object> retorno = new HashMap<String, Object>();
        List lista = new ArrayList();
        if (jCheckBoxEstoque.isSelected()) {
            //:o
            retorno.put("modelo", "estoque");
        } else {
            if (jCheckBoxCliente.isSelected()) {
                //:)
                retorno.put("modelo", "cliente");
            } else {
                if (jCheckBoxVenda.isSelected()) {
                    //:(
                    retorno.put("modelo", "venda");
                } else {
                    if (jCheckBoxCaixa.isSelected()) {
                        //:@
                        retorno.put("modelo", "caixa");
                    }
                }
            }
        }
        modelo = (DefaultTableModel) jTableRelatorio.getModel();
        for (int i = 0; i < modelo.getRowCount(); i++) {
            String aux = "";
            for (int j = 0; j < modelo.getColumnCount(); j++) {
                aux += modelo.getValueAt(i, j) + "#";
            }
            lista.add(aux);
        }
        retorno.put("lista", lista);
        return retorno;
    }

    private void imprimirRelatorio() {
        Impressao impressao = new Impressao();
        impressao.imprimir(this.getModeloImprimir());
    }

    private String getModeloImprimir() {
        String impri = "";
        HashMap<String, Object> dados = this.pegaDados();
        if (dados != null) {
            List lista = (List) dados.get("lista");
            if (lista.size() == 0) {
                return null;
            }
            impri += "|============================================================|\n";
            if (((String) dados.get("modelo")).equals("estoque")) {
                impri += " VANIA MODAS  RELATORIO DE ESTOQUE\n";
                impri += " Data: " + jLabelData.getText() + "  ";
                impri += " Hora: " + jLabelHora.getText() + "\n";
                impri += "|------------------------------------------------------------|\n";//62
                impri += "  CODIGO |          DESCRICAO         |    VALOR   | QUANT \n";
                //8--28--12--8
                String str = "";
                for (int i = 0; i < lista.size(); i++) {
                    String[] split = ((String) lista.get(i)).split("#");
                    String preencher = " ";
                    for (int j = 0; j < (8 - split[0].length()); j++) {
                        preencher += " ";
                    }
                    str += preencher + split[0] + "|";//codigo
                    preencher = "";
                    String aux = "";
                    if (split[1].length() > 28) {
                        for (int j = 0; j < 28; j++) {
                            aux += split[1].charAt(j);
                        }
                    } else {
                        for (int j = 0; j < (28 - split[1].length()); j++) {
                            preencher += " ";
                        }
                        aux = split[1];
                    }
                    str += aux + preencher + "|";//descricao

                    preencher = "";
                    for (int j = 0; j < (12 - (split[2].split(" ")[1]).length()); j++) {
                        preencher += " ";
                    }
                    str += preencher + split[2].split(" ")[1] + "|";//

                    preencher = "";
                    for (int j = 0; j < (9 - split[3].length()); j++) {
                        preencher += " ";
                    }
                    str += preencher + split[3] + " \n";//quant
                }
                impri += str;
            } else {
                if (((String) dados.get("modelo")).equals("cliente")) {
                    impri += " VANIA MODAS  RELATORIO DE CLIENTE";
                    impri += " Data: " + jLabelData.getText() + "  ";
                    impri += " Hora: " + jLabelHora.getText() + "\n";
                    impri += "|------------------------------------------------------------|\n";//59
                    impri += " CODIGO |      NOME    |     CPF      |   TELEFONE  |DIVIDAS \n";
                    //7--14--14--13--8
                    String str = "";
                    for (int i = 0; i < lista.size(); i++) {
                        String[] split = ((String) lista.get(i)).split("#");
                        String preencher = " ";
                        for (int j = 0; j < (7 - split[0].length()); j++) {
                            preencher += " ";
                        }
                        str += preencher + split[0] + "|";//codigo

                        preencher = "";
                        String aux = "";
                        if (split[1].length() > 14) {
                            for (int j = 0; j < 14; j++) {
                                aux += split[1].charAt(j);
                            }
                        } else {
                            for (int j = 0; j < (14 - split[1].length()); j++) {
                                preencher += " ";
                            }
                            aux = split[1];
                        }
                        str += aux + preencher + "|";//nome
                        str += split[2] + "|";//cpf
                        str += split[3] + "|";//fone
                        preencher = "";
                        aux = split[4] + "0";
                        for (int j = 0; j < (8 - aux.length()); j++) {
                            preencher += " ";
                        }
                        str += preencher + aux + " \n";//codigo
                    }
                    impri += str;

                } else {
                    if (((String) dados.get("modelo")).equals("venda")) {
                        impri += " VANIA MODAS  RELATORIO DE VENDA\n";
                        impri += " Data: " + jLabelData.getText() + "  ";
                        impri += " Hora: " + jLabelHora.getText() + "\n";
                        impri += "|------------------------------------------------------------|\n";
                        impri += "  CODIGO |    DATA    |  TOTAL |   TIPO   \n";
                        //A PRAZO
                        //00/00/0000
                        //8--12--8--9
                        String str = "";
                        for (int i = 0; i < lista.size(); i++) {
                            String[] split = ((String) lista.get(i)).split("#");
                            String preencher = " ";
                            for (int j = 0; j < (8 - split[0].length()); j++) {
                                preencher += " ";
                            }
                            str += preencher + split[0] + "|";//codigo

                            str += " " + split[1] + " |";//data
                            preencher = "";
                            String aux = split[2];
                            for (int j = 0; j < (8 - aux.length()); j++) {
                                preencher += " ";
                            }
                            str += preencher + aux + "|";//total
                            str += " " + split[3] + "\n";//tipo
                        }
                        impri += str;
                    } else {
                        if (((String) dados.get("modelo")).equals("caixa")) {
                            impri += " VANIA MODAS  RELATORIO DE CAIXA\n";
                            impri += " Data: " + jLabelData.getText() + "  ";
                            impri += " Hora: " + jLabelHora.getText() + "\n";
                            impri += "|------------------------------------------------------------|\n";
                            impri += "  CODIGO |    DATA    |  VALOR   \n";
                            //8--12--9
                            String str = "";
                            for (int i = 0; i < lista.size(); i++) {
                                String[] split = ((String) lista.get(i)).split("#");
                                String preencher = " ";
                                for (int j = 0; j < (8 - split[0].length()); j++) {
                                    preencher += " ";
                                }
                                str += preencher + split[0] + "|";//codigo

                                str += " " + split[1] + " |";//data
                                preencher = "";
                                String aux = (split[2].split(" ")[1]);
                                for (int j = 0; j < (8 - aux.length()); j++) {
                                    preencher += " ";
                                }
                                str += preencher + aux + " \n";//valor
                            }
                            impri += str;
                        }
                    }
                }
            }
            impri += "|============================================================|\n";
            return impri;
        }
        return null;
    }
}
